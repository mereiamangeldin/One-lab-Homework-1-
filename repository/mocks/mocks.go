// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/mereiamangeldin/One-lab-Homework-1/model"
)

// MockIUserRepository is a mock of IUserRepository interface.
type MockIUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIUserRepositoryMockRecorder
}

// MockIUserRepositoryMockRecorder is the mock recorder for MockIUserRepository.
type MockIUserRepositoryMockRecorder struct {
	mock *MockIUserRepository
}

// NewMockIUserRepository creates a new mock instance.
func NewMockIUserRepository(ctrl *gomock.Controller) *MockIUserRepository {
	mock := &MockIUserRepository{ctrl: ctrl}
	mock.recorder = &MockIUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserRepository) EXPECT() *MockIUserRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockIUserRepository) Delete(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIUserRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIUserRepository)(nil).Delete), id)
}

// GetBalance mocks base method.
func (m *MockIUserRepository) GetBalance(id uint) (model.UserBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", id)
	ret0, _ := ret[0].(model.UserBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockIUserRepositoryMockRecorder) GetBalance(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockIUserRepository)(nil).GetBalance), id)
}

// GetById mocks base method.
func (m *MockIUserRepository) GetById(id uint) (model.UserCreateResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(model.UserCreateResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockIUserRepositoryMockRecorder) GetById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockIUserRepository)(nil).GetById), id)
}

// GetUserBooks mocks base method.
func (m *MockIUserRepository) GetUserBooks(id uint) ([]model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBooks", id)
	ret0, _ := ret[0].([]model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBooks indicates an expected call of GetUserBooks.
func (mr *MockIUserRepositoryMockRecorder) GetUserBooks(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBooks", reflect.TypeOf((*MockIUserRepository)(nil).GetUserBooks), id)
}

// Update mocks base method.
func (m *MockIUserRepository) Update(id uint, user model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIUserRepositoryMockRecorder) Update(id, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIUserRepository)(nil).Update), id, user)
}

// UpdateBalance mocks base method.
func (m *MockIUserRepository) UpdateBalance(balance model.UserBalance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBalance", balance)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBalance indicates an expected call of UpdateBalance.
func (mr *MockIUserRepositoryMockRecorder) UpdateBalance(balance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalance", reflect.TypeOf((*MockIUserRepository)(nil).UpdateBalance), balance)
}

// UpdatePassword mocks base method.
func (m *MockIUserRepository) UpdatePassword(id uint, pass model.ChangePassword) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", id, pass)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockIUserRepositoryMockRecorder) UpdatePassword(id, pass interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockIUserRepository)(nil).UpdatePassword), id, pass)
}

// MockIAuthorizationRepository is a mock of IAuthorizationRepository interface.
type MockIAuthorizationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthorizationRepositoryMockRecorder
}

// MockIAuthorizationRepositoryMockRecorder is the mock recorder for MockIAuthorizationRepository.
type MockIAuthorizationRepositoryMockRecorder struct {
	mock *MockIAuthorizationRepository
}

// NewMockIAuthorizationRepository creates a new mock instance.
func NewMockIAuthorizationRepository(ctrl *gomock.Controller) *MockIAuthorizationRepository {
	mock := &MockIAuthorizationRepository{ctrl: ctrl}
	mock.recorder = &MockIAuthorizationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuthorizationRepository) EXPECT() *MockIAuthorizationRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockIAuthorizationRepository) CreateUser(user model.User) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIAuthorizationRepositoryMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIAuthorizationRepository)(nil).CreateUser), user)
}

// GetUser mocks base method.
func (m *MockIAuthorizationRepository) GetUser(user model.AuthUser) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", user)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockIAuthorizationRepositoryMockRecorder) GetUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockIAuthorizationRepository)(nil).GetUser), user)
}

// MockIBookRepository is a mock of IBookRepository interface.
type MockIBookRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIBookRepositoryMockRecorder
}

// MockIBookRepositoryMockRecorder is the mock recorder for MockIBookRepository.
type MockIBookRepositoryMockRecorder struct {
	mock *MockIBookRepository
}

// NewMockIBookRepository creates a new mock instance.
func NewMockIBookRepository(ctrl *gomock.Controller) *MockIBookRepository {
	mock := &MockIBookRepository{ctrl: ctrl}
	mock.recorder = &MockIBookRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBookRepository) EXPECT() *MockIBookRepositoryMockRecorder {
	return m.recorder
}

// CreateBook mocks base method.
func (m *MockIBookRepository) CreateBook(book model.Book) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBook", book)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBook indicates an expected call of CreateBook.
func (mr *MockIBookRepositoryMockRecorder) CreateBook(book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBook", reflect.TypeOf((*MockIBookRepository)(nil).CreateBook), book)
}

// DeleteBook mocks base method.
func (m *MockIBookRepository) DeleteBook(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBook", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBook indicates an expected call of DeleteBook.
func (mr *MockIBookRepositoryMockRecorder) DeleteBook(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBook", reflect.TypeOf((*MockIBookRepository)(nil).DeleteBook), id)
}

// GetBookById mocks base method.
func (m *MockIBookRepository) GetBookById(id uint) (model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookById", id)
	ret0, _ := ret[0].(model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookById indicates an expected call of GetBookById.
func (mr *MockIBookRepositoryMockRecorder) GetBookById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookById", reflect.TypeOf((*MockIBookRepository)(nil).GetBookById), id)
}

// GetBooks mocks base method.
func (m *MockIBookRepository) GetBooks() ([]model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBooks")
	ret0, _ := ret[0].([]model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBooks indicates an expected call of GetBooks.
func (mr *MockIBookRepositoryMockRecorder) GetBooks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooks", reflect.TypeOf((*MockIBookRepository)(nil).GetBooks))
}

// GetPrice mocks base method.
func (m *MockIBookRepository) GetPrice(id uint) (model.BookPrice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrice", id)
	ret0, _ := ret[0].(model.BookPrice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrice indicates an expected call of GetPrice.
func (mr *MockIBookRepositoryMockRecorder) GetPrice(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrice", reflect.TypeOf((*MockIBookRepository)(nil).GetPrice), id)
}

// UpdateBook mocks base method.
func (m *MockIBookRepository) UpdateBook(id uint, book model.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBook", id, book)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBook indicates an expected call of UpdateBook.
func (mr *MockIBookRepositoryMockRecorder) UpdateBook(id, book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockIBookRepository)(nil).UpdateBook), id, book)
}
